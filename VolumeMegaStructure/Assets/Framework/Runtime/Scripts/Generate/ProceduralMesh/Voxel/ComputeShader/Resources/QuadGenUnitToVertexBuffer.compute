#include "VoxelGenComputeShaderInclude.compute"
#pragma kernel CSMain

//The CPU will give a float*7 pack to the compute shader for each quad.
//The pack contains a1,a2,b1,b2,c,dir,texture_id which represents full info of a quad.
//The indexer: [+-xyz dir][abcd][xyz]
static const int quad_abcd_indices[6][4][3] =
{
    {{4, 0, 2}, {4, 1, 2}, {4, 1, 3}, {4, 0, 3}},
    {{4, 0, 2}, {4, 0, 3}, {4, 1, 3}, {4, 1, 2}},
    {{0, 4, 2}, {0, 4, 3}, {1, 4, 3}, {1, 4, 2}},
    {{0, 4, 2}, {1, 4, 2}, {1, 4, 3}, {0, 4, 3}},
    {{0, 2, 4}, {1, 2, 4}, {1, 3, 4}, {0, 3, 4}},
    {{0, 2, 4}, {0, 3, 4}, {1, 3, 4}, {1, 2, 4}},
};

int quad_count;
StructuredBuffer<float> quad_unit_array;
RWStructuredBuffer<VertexBufferUnit> vertex_buffer;
RWStructuredBuffer<int> wait;

[numthreads(1024,1,1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    int i_quad = id.x;
    if (!(i_quad < quad_count)) { return; }
    int i_unit_start = i_quad * 7;
    int i_unit_end = i_unit_start + 7;
    float quad_unit[7];
    for (int i_unit = i_unit_start; i_unit < i_unit_end; i_unit++)
    {
        quad_unit[i_unit - i_unit_start] = quad_unit_array[i_unit];
    }
    int cur_abcd_indices[4][3] = quad_abcd_indices[quad_unit[5]];

    VertexBufferUnit a, b, c, d;
    a.position = float3(
        quad_unit[cur_abcd_indices[0][0]],
        quad_unit[cur_abcd_indices[0][1]],
        quad_unit[cur_abcd_indices[0][2]]),
    a.dir = quad_unit[5];
    a.texture_id = quad_unit[6];

    b.position = float3(
        quad_unit[cur_abcd_indices[1][0]],
        quad_unit[cur_abcd_indices[1][1]],
        quad_unit[cur_abcd_indices[1][2]]),
    b.dir = quad_unit[5];
    b.texture_id = quad_unit[6];

    c.position = float3(
        quad_unit[cur_abcd_indices[2][0]],
        quad_unit[cur_abcd_indices[2][1]],
        quad_unit[cur_abcd_indices[2][2]]),
    c.dir = quad_unit[5];
    c.texture_id = quad_unit[6];

    d.position = float3(
        quad_unit[cur_abcd_indices[3][0]],
        quad_unit[cur_abcd_indices[3][1]],
        quad_unit[cur_abcd_indices[3][2]]),
    d.dir = quad_unit[5];
    d.texture_id = quad_unit[6];

    int i_vertex_start = i_quad * 4;
    vertex_buffer[i_vertex_start + 0] = a;
    vertex_buffer[i_vertex_start + 1] = b;
    vertex_buffer[i_vertex_start + 2] = c;
    vertex_buffer[i_vertex_start + 3] = d;
}
