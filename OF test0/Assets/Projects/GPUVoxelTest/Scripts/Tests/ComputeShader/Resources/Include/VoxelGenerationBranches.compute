// // The indices: [corner number][x/y/z]
// static const int corner_index_offset_in_cube[8][3] =
//     {
//     {}
// };


//The corner point is (x,y,z)
//(0,0,0) is the original corner point of the cube
//Every branch in a for will build a quad of the cube
//A quad is between 2 cube corner c0 and the further side adjacent corner of c0
//called c1 ( can be up, right, forward )
//The first point is c0, the second point is c1
//There are 12 quads in a cube at most.
//This array represents the 2 cube corners' index offset of each quad.
//
// The indices: [quad number][c0/c1]
static const int3 quad_2_corner_in_cube[12][2] =
{

    {int3(0, 0, 0), int3(0, 0, 1)},
    {int3(0, 0, 0), int3(0, 1, 0)},
    {int3(0, 0, 0), int3(1, 0, 0)},

    {int3(0, 0, 1), int3(0, 1, 1)},
    {int3(0, 0, 1), int3(1, 0, 1)},

    {int3(0, 1, 0), int3(0, 1, 1)},
    {int3(0, 1, 0), int3(1, 1, 0)},

    {int3(1, 0, 0), int3(1, 0, 1)},
    {int3(1, 0, 0), int3(1, 1, 0)},

    {int3(0, 1, 1), int3(1, 1, 1)},

    {int3(1, 0, 1), int3(1, 1, 1)},

    {int3(1, 1, 0), int3(1, 1, 1)}
};


//This array represents the directions of the 12 quads. 0/1/2 -> x/y/z axis direction
//
// The index: [quad number]
static const int quad_direction_in_cube[12] =
{
    2, 1, 0,
    1, 0,
    2, 0,
    2, 1,
    0,
    1,
    2
};



//1. The point is (x,y,z),
//A quad is between 2 cube corner c0 and the further side adjacent corner of c0
//called c1 ( can be up, right, forward )
//2. The original corner of the quad is always c1,
//while the other 3 corner has a offset from c1
//3. There are 6 case in total, whose quad face normal is +/- x/y/z axis direction.
//4. When c0 is inside the mesh and c1 is outside the mesh,
//the quad face normal should be positive axis direction
//5. Look above the quad face, the corners should be clockwise
//6. Note that the order of quad corner of y normal is inverse with other 2 to make it clockwise
//
// The indices: [normal direction x/y/z][normal direction +/-][which point of the quad(in order for rendering)]
static const int3 corner_index_offset_in_quad[3][2][4] =
{

    //quad of x normal
    {
        {int3(0, 0, 0), int3(0, 1, 0), int3(0, 1, 1), int3(0, 0, 1)},
        {int3(0, 0, 0), int3(0, 0, 1), int3(0, 1, 1), int3(0, 1, 0)},
    },

    //quad of y normal
    {
        {int3(0, 0, 0), int3(0, 0, 1), int3(1, 0, 1), int3(1, 0, 0)},
        {int3(0, 0, 0), int3(1, 0, 0), int3(1, 0, 1), int3(0, 0, 1)},
    },

    //quad of z normal
    {
        {int3(0, 0, 0), int3(1, 0, 0), int3(1, 1, 0), int3(0, 1, 0)},
        {int3(0, 0, 0), int3(0, 1, 0), int3(1, 1, 0), int3(1, 0, 0)},
    },
};
