//The point is (x,y,z)
//(0,0,0) is the original point of the cube
//Every branch in a for will build a quad of the cube
//A quad is between 2 cube corner c0 and the further side adjacent corner of c0
//called c1 ( can be up, right, forward )
//The first point is c0, the second point is c1
//There are 12 quads in a cube at most.
static const int quad_in_cube[12][2][3] =
{

    {{0, 0, 0}, {0, 0, 1}},
    {{0, 0, 0}, {0, 1, 0}},
    {{0, 0, 0}, {1, 0, 0}},

    {{0, 0, 1}, {0, 1, 1}},
    {{0, 0, 1}, {1, 0, 1}},

    {{0, 1, 0}, {0, 1, 1}},
    {{0, 1, 0}, {1, 1, 0}},

    {{1, 0, 0}, {1, 0, 1}},
    {{1, 0, 0}, {1, 1, 0}},

    {{0, 1, 1}, {1, 1, 1}},

    {{1, 0, 1}, {1, 1, 1}},

    {{1, 1, 0}, {1, 1, 1}}
};

//The point is (x,y,z)
//A quad is between 2 cube corner c0 and the further side adjacent corner of c0
//called c1 ( can be up, right, forward )
//A quad has four corner A,B,C,D
//The original corner of the quad is always c1,
//while the other 3 corner has a offset from c1
//There are 6 case in total, whose quad face normal is +/- x/y/z axis direction.
//When c0 is inside the mesh and c1 is outside the mesh,
//the quad face normal should be positive axis direction
//Look towards the quad face, the corners should be clockwise
/*
* B---C
* |  /|
* | / |
* A---D
*/
static const int quad_corner_index_offset[3][4][3] =
{
    //quad of x normal
    {{0, 0, 0}, {0, 1, 0}, {0, 1, 1}, {0, 0, 1}},
    //quad of y normal
    {{0, 0, 0}, {0, 0, 1}, {1, 0, 1}, {1, 0, 0}},
    //quad of z normal
    {{0, 0, 0}, {1, 0, 0}, {1, 1, 0}, {0, 1, 0}},
};
